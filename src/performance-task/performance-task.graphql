type PerformanceTask {
  objectives: String!
  description: String
  tone: String!
  modality: String!
  language: String
  audience: Audience!
}

type Audience {
  ageStart: Int!
  ageEnd: Int!
  level: String!
  desc: String
}

input CreateAudienceInput {
  ageStart: Int!
  ageEnd: Int!
  level: String!
  desc: String
}

input CreatePerformanceTaskInput {
  objectives: String!
  description: String
  tone: String!
  modality: String!
  language: String
  audience: CreateAudienceInput!
}

input UpdatePerformanceTaskInput {
  objectives: String
  description: String
  tone: String
  modality: String
  language: String
  audience: CreateAudienceInput
}

scalar JSON

enum ProgressStatus {
  INITED
  INITFAIL
  COMPLETE
  PENDING
}

type RespondPerformanceTask {
  id: String!
  userId: String
  request: PerformanceTask
  result: JSON
  createdDate: DateTime
  updatedDate: DateTime
  progressPercent: Int
  progressStatus: ProgressStatus!
}

type Query {
  performanceTasks: [RespondPerformanceTask]!

  performanceTask(id: String!): RespondPerformanceTask!
}

type Mutation {
  createPerformanceTask(data: CreatePerformanceTaskInput!): RespondPerformanceTask

  removePerformanceTask(id: String!): RespondPerformanceTask
}
