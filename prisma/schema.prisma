datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clerkId String @unique

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  Course    Course[]

  @@map("users")
}

model Course {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  objective      String[] @default([])
  description    String?  @default("")
  language       String?  @default("English")
  category       String
  tone           String   @default("Friendly")
  modality       String   @default("Hybrid")
  classSize      String
  topics         String[] @default([])
  duration       Int // Course Length In hours
  durationLesson Int // Lesson Duration In minutes

  creatorId  String // clerkUserId
  audienceId String    @db.ObjectId
  Creator    User?     @relation(fields: [creatorId], references: [clerkId])
  Audience   Audience? @relation(fields: [audienceId], references: [id])

  outline         CourseOutline? // Graphql type is enough
  detailedOutline CourseDetailedOutline? // Graphql ...

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  lessonOrder String[] @default([]) // Array of lesson Object IDs representing the order

  Lesson Lesson[]

  @@map("courses")
}

type CourseOutline {
  courseDuration String
  inScope        CourseTopic[]
  outOfScope     CourseTopic[]
  explanation    String?
}

type CourseDetailedOutline {
  sections                  DetailedOutlineSection[]
  objectiveTopicConnections DetailedOutlineObjectiveTopicConnection[]
  summary                   CourseDetailedSummary
  rationale                 String
}

type CourseDetailedSummary {
  totalSections Int
  totalTopics   Int
  courseHours   Int
}

type DetailedOutlineSection {
  title  String
  topics DetailedOutlineSectionTopic[]
}

type DetailedOutlineSectionTopic {
  title            String
  onScreenContent  String
  topicDescription String
  detailedCoverage String
  resources        String
  timingMins       Int
  connection       String[]
}

type DetailedOutlineObjectiveTopicConnection {
  objective String
  topics    String[]
}

type CourseTopic {
  topic     String
  subtopics String[]
}

model Audience {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  ageStart Int
  ageEnd   Int
  level    String
  desc     String?  @db.String // audience needs & interests
  courses  Course[]

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  @@unique([ageStart, ageEnd, level])
  @@map("audiences")
}

model Lesson {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  // FIXME: discuss on how to store lesson order
  courseId String    @db.ObjectId
  title    String
  sections Section[]

  Course Course? @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp

  @@map("lessons")
}

type Section {
  title  String
  topics Topic[]
}

type Topic {
  title            String
  onScreenContent  String
  description      String
  detailedCoverage String
  resource         String?
  timing           String?
}
